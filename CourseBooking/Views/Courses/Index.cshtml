@using CourseBooking.Models
@using CourseBooking.ViewModels

@*<script>
    kendo.ui.validator.rules.mvcdate = function (input) {
        //use the custom date format here
        //kendo.parseDate - http://docs.telerik.com/kendo-ui/api/javascript/kendo#methods-parseDate
        if (!input.attr("data-val-date")) {
            return true;
        }
        return input.val() === "" || kendo.parseDate(input.val(), "dd.MM.yyyy") !== null;
    }
</script>*@

@{
    ViewBag.Title = "Index";
}

<h2>Kurse</h2>

@(Html.Kendo().Grid<Course>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Name);
        columns.Bound(p => p.StartDateTime).Format("{0:dd.MM.yyyy HH:mm}").Width(160);
        columns.Bound(p => p.Remark).Width(160);
        columns.Bound(p => p.Price).Width(160);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(160);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Course"))
    .Pageable()
    .ClientDetailTemplateId("template")
    .Groupable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:600px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        //.Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
            .Create(update => update.Action("Course_Create", "Courses"))
                .Read(read => read.Action("GetCourses", "Courses"))
            .Update(update => update.Action("Course_Update", "Courses"))
                .Destroy(update => update.Action("DeleteCourse", "Courses"))
    )
)
<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<CourseParticipantViewModel>()
    .Name("itemGrid_#Id#")
            .Columns(columns =>
            {
                columns.Bound(p => p.Name);
                columns.Bound(p => p.PreName);
                columns.Bound(p => p.City);
                columns.Bound(p => p.Phone);
            })
            .Scrollable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Read(read => read.Action("GetCourseRegistrations", "Courses", new { courseId = "#=Id#" }))
            ).ToClientTemplate())
</script>
@*<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>*@

