@using CourseBooking.Models
@{
    ViewBag.Title = "Index";
}

<h2>Kurstypen</h2>

@(Html.Kendo().Grid<CourseSet>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Name);
        columns.Command(command =>
        {
            command.Edit(); command.Destroy();
        })
        .Width(160);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CourseSet"))
    .Pageable()
    .Sortable()
    .ClientDetailTemplateId("template")
    .Scrollable()
    .HtmlAttributes(new { style = "height:430px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
            .Create(update => update.Action("CreateCourseSet", "CourseSet"))
                            .Read(read => read.Action("GetCourseSets", "CourseSet"))
                            .Update(update => update.Action("UpdateCourseSet", "CourseSet"))
                            .Destroy(update => update.Action("DeleteCourseSet", "CourseSet"))
    )
      )

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<CourseSetEntry>()
    .Name("itemGrid_#Id#")
            .Columns(columns =>
            {
                columns.Bound(p => p.Id);
                //columns.Bound(p => p.CourseTemplate.Name);
                columns.Command(command =>
                {
                    command.Destroy();
                })
                .Width(160);
            })
                    .ToolBar(toolbar => toolbar.Create())
                            .Pageable()
            .Sortable()
            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CourseSetEntry"))
            .Scrollable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .Model(m => m.Field(f => f.CourseSetId).DefaultValue("#=Id#"))
                .PageSize(20)
                .Events(events => events.Error("error_handler"))
                .Model(model => model.Id(p => p.Id))
                                            .Create(update => update.Action("CreateCourseSetEntry", "CourseSet"))
                                    .Read(read => read.Action("GetCourseSetEntries", "CourseSet", new { courseSetId = "#=Id#"}))
                                    .Destroy(update => update.Action("DeleteCourseSetEntry", "CourseSet"))
                                            .Update(update => update.Action("UpdateCourseSetEntry", "CourseSet"))
            )
                                    .ToClientTemplate())
</script>


<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>